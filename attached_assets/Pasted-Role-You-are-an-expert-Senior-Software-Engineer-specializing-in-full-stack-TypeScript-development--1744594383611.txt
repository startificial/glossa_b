Role: You are an expert Senior Software Engineer specializing in full-stack TypeScript development, clean architecture, API design, and performance optimization, with specific expertise in Node.js backend patterns.

Overall Project Context:
The project is a web application built with:

Frontend: React (TypeScript) - located in a client directory.
Backend: Node.js (TypeScript) - located in a server directory.
Database: Neon DB (Serverless PostgreSQL).
ORM: Drizzle ORM.
Overall Goal: Refactor the entire codebase for improved clean code practices, logical separation of concerns, and performance optimization.
Previous Phase Context: Phase 1 focused on refining the Drizzle ORM setup, database schemas, and initial data access patterns within the server directory. Assume basic data access might now be cleaner or moving towards a repository/service pattern.
Current Task: Phase 2 - Backend Separation of Concerns (Node.js)
This prompt focuses specifically on the second phase: refactoring the Node.js backend code within the server directory to establish a clear separation between API route handling, business logic, and data access layer interactions. Clean code principles remain paramount.

Phase 2 Goals:

Separate Concerns: Isolate API route handling logic (e.g., request parsing, response formatting - often called Controllers) from core business logic (e.g., orchestrating operations, validations - often called Services).
Define Service Layer: Ensure business logic resides within distinct service functions/classes.
Utilize Data Layer: Refactor services to correctly utilize the data access layer (using patterns established or suggested in Phase 1, e.g., calling repository methods). Services should not typically contain raw Drizzle queries if a data access layer exists.
Apply Clean Code: Implement clean coding principles (meaningful naming, small functions/methods, strong typing, DRY) within controllers and services.
Consistent Error Handling: Refactor or implement a consistent error handling strategy for the backend API flow (e.g., handling errors from services or the data layer and translating them into appropriate HTTP responses).
Input Code Snippets:

You will be given the following code snippets from the server directory:

API Route Handler Example:

TypeScript

// [Paste the full code for a typical API route handler file or function here. This might currently contain mixed logic.]
Related Business Logic Example (if separate):

TypeScript

// [If business logic related to the route handler above is already in a separate file/function, paste it here. Otherwise, state that it's currently mixed in the route handler.]
(Optional) Middleware Example:

TypeScript

// [If specific middleware is used by the route handler above and relevant to its refactoring, paste the middleware code or its usage here.]
(Optional) Phase 1 Data Access Pattern:

TypeScript

// [If Phase 1 resulted in a specific data access pattern (e.g., a repository function signature or class structure), briefly describe or provide a snippet of it here. This helps ensure the service layer uses it correctly.]
// Example description: "Phase 1 established repository methods like `userRepository.findById(id)`."
Required Output:

Based only on the provided input snippets and optional context:

Refactored Code: Provide the refactored code, potentially splitting the original route handler into:
A lean Controller function (handling HTTP request/response).
A separate Service function/class (containing the business logic).
Explanations: Clearly explain the changes, focusing on how they achieve separation of concerns (Controller vs. Service), how the Service interacts with the presumed data access layer, improvements in clean code, and the error handling strategy.
Structural Suggestions (Backend): Suggest a standard directory structure for the backend if it's not already implied (e.g., "Consider organizing code into server/src/routes, server/src/controllers, server/src/services, server/src/middleware").
Interaction Flow: Clearly illustrate how the refactored controller calls the service, and how the service interacts with the data layer (using the pattern from Phase 1 context, if provided).
Questions: If any input is unclear or more context specifically related to backend structure or logic flow is needed, ask clarifying questions.
Constraint:

Maintain the existing core functionality represented in the snippets.
Adhere strictly to TypeScript and Node.js idioms and common backend patterns (like Controller-Service).