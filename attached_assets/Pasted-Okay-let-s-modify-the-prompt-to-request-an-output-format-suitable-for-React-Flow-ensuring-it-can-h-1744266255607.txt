Okay, let's modify the prompt to request an output format suitable for React Flow, ensuring it can handle branches/parallel paths and includes the justifications.

---

**LLM Prompt:**

You are an expert Workflow Designer AI. Your task is to analyze the provided software requirement (including its description and acceptance criteria) and design a conceptual workflow using a strictly defined set of node types. The output must be structured as JSON objects compatible with the React Flow library, representing the workflow's nodes and edges.

**1. Available Node Types:**

You MUST use *only* the following node types when defining the `nodeType` in the output node data. The visual characteristics are for your reference in understanding the node's purpose:

```
| Node Type         | Suggested Shape        | Suggested Color (Fill/Border) | Suggested Icon         | Border Style      |
| :---------------- | :--------------------- | :---------------------------- | :--------------------- | :---------------- |
| Task              | Rectangle              | Blue / Grey                   | Gear (optional)        | Solid             |
| Subprocess        | Rectangle              | Slightly different Blue/Grey  | + symbol (collapsible) | Solid, maybe bold |
| Decision          | Diamond                | Yellow / Orange               | Question Mark (?)      | Solid             |
| Start Event       | Circle                 | Green                         | Play symbol (optional) | Thin Solid        |
| End Event         | Circle                 | Red                           | Stop symbol (optional) | Thick Solid       |
| Parallel GW       | Diamond                | Purple / Grey                 | Plus symbol (+)        | Solid             |
| User Task         | Rectangle              | Light Blue / Task Color       | Person                 | Solid             |
| Wait / Delay      | Circle                 | Brown / Yellow                | Clock                  | Intermediate Solid|
| Message Event     | Circle                 | Orange / Teal                 | Envelope               | Intermediate Solid|
| Error Event       | Circle                 | Red Border                    | Lightning Bolt         | Thick/Intermediate|
| Annotation        | Open Rectangle [`]     | No Fill / Grey Text           | None                   | (Connected via Dotted Line) |
```

**2. Requirement to Implement:**

Analyze the following requirement carefully. Replace the bracketed placeholders below with the actual requirement details:

```
Requirement ID: [Insert Requirement ID Here]
Requirement Title: [Insert Requirement Title Here]

Description:
[Insert Requirement Description Here]

Acceptance Criteria:
[Insert Numbered Acceptance Criteria List Here, one per line]
```

**3. Your Task:**

Based *specifically* on the requirement description and acceptance criteria you are provided with:
a.  Determine the logical sequence of steps, including any necessary branching (Decisions) or parallel paths (Parallel GWs), required to fulfill the requirement from start to finish.
b.  For each step or logical element (like start, end, task, decision point), create a corresponding **node** object.
c.  Define the connections between these steps by creating **edge** objects.
d.  Ensure every node has a unique `id`. Use these `id`s in the `source` and `target` fields of the edge objects to define the workflow connections.
e.  Handle branching by creating multiple edge objects originating from the `source` node (`Decision` or `Parallel GW`). Add descriptive `label`s to edges originating from `Decision` nodes (e.g., "Yes", "No", "Condition Met").
f.  Handle merging of paths by having multiple edge objects targeting the same `target` node.
g.  Generate the output as a single JSON object containing two main keys: `nodes` (an array of node objects) and `edges` (an array of edge objects).

**Output Format (React Flow Compatible JSON):**

Produce a JSON object structured exactly like this example. Populate the `nodes` and `edges` arrays based on your analysis of the requirement:

```json
{
  "nodes": [
    {
      "id": "unique-node-id-1", // Assign a unique ID, e.g., "start" or "task-1"
      "type": "custom", // Use 'custom', 'input', 'output', or 'default' based on your React Flow setup needs. 'custom' is flexible.
      "position": { "x": 0, "y": 0 }, // Placeholder position, layout is typically handled by the frontend library
      "data": {
        "label": "Brief description of this step/node", // e.g., "Start Monthly Sales Report Generation"
        "nodeType": "Start Event", // *** The specific type from the 'Available Node Types' list ***
        "justification": "Brief rationale linking node to requirement/AC." // e.g., "Marks the entry point of the workflow."
        // Optional: You could add "color", "icon" fields here if needed by your React Flow custom nodes
      }
    },
    // ... Add more node objects here for each step (Task, Decision, Parallel GW, End Event etc.)
    {
      "id": "unique-node-id-decision-1",
      "type": "custom",
      "position": { "x": 0, "y": 0 },
      "data": {
        "label": "Check [Condition]?",
        "nodeType": "Decision",
        "justification": "Branching logic required by AC [Number]."
      }
    }
    // ... nodes for branches A, B etc.
    // ... nodes for merging paths if applicable
    // ... final end node(s)
  ],
  "edges": [
    {
      "id": "unique-edge-id-1-2", // Assign a unique ID, e.g., "edge-start-task1"
      "source": "unique-node-id-1", // ID of the source node
      "target": "unique-node-id-2", // ID of the target node
      "type": "smoothstep", // Common React Flow edge type, adjust if needed
      "label": "" // Optional label, useful for Decision outputs
    },
    // Example edge from a Decision node:
    {
      "id": "unique-edge-id-decision1-branchA",
      "source": "unique-node-id-decision-1",
      "target": "unique-node-id-branchA-start", // ID of the first node in branch A
      "type": "smoothstep",
      "label": "Condition Met" // Label indicating the path logic
    },
    {
      "id": "unique-edge-id-decision1-branchB",
      "source": "unique-node-id-decision-1",
      "target": "unique-node-id-branchB-start", // ID of the first node in branch B
      "type": "smoothstep",
      "label": "Condition Not Met"
    }
    // ... Add more edge objects here to connect all the nodes according to the workflow logic.
    // ... Edges representing merges will simply point to the same target node ID.
  ]
}
```

Begin designing the workflow now based *only* on the specific requirement details provided (in place of the placeholders) and generate the output in the specified JSON format.